Question link: https://leetcode.com/problems/longest-univalue-path/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int Lpath = 0;
    public int longestUnivaluePath(TreeNode root) {
        pathCalculator(root);
        return Lpath;
    }

    private int pathCalculator(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int left = pathCalculator(root.left);
        int right = pathCalculator(root.right);

        int TLeft = 0;
        int Tright = 0;

        if (root.left != null && root.left.val == root.val) {
            TLeft = TLeft + left + 1;
        }

        if (root.right != null && root.right.val == root.val) {
            Tright = Tright + right + 1;
        }

        Lpath = Math.max(Lpath, TLeft + Tright);
        return Math.max(Tright, TLeft);
    }
}
