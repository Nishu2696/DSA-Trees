Question Link: https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map;
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        if (root == null) {
            return null;
        }
        map = new TreeMap<>();
        dfs(root, 0, 0);

        List<List<Integer>> answer = new ArrayList<>();
        for (int key:map.keySet()) {
            List<Integer> output = new ArrayList<>();
            TreeMap<Integer, PriorityQueue<Integer>> idx = map.get(key);
            for (int k: idx.keySet()) {
                PriorityQueue<Integer> value = idx.get(k);
                while (!value.isEmpty()) {
                    output.add(value.poll());
                }
            }
            answer.add(output);
        }
        return answer;
    }

    public void dfs(TreeNode root, int x, int y) {
        if (root == null) {
            return;
        }

        map.putIfAbsent(x, new TreeMap<>());
        map.get(x).putIfAbsent(y, new PriorityQueue<>());
        map.get(x).get(y).add(root.val);

        if (root.left != null) {
            dfs(root.left, x - 1, y + 1);
        }
        if (root.right != null) {
            dfs(root.right, x + 1, y + 1);
        }
    }
}
