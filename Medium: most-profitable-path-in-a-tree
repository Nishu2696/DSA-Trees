Question Link: https://leetcode.com/problems/most-profitable-path-in-a-tree/

class Solution {
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        List<Integer>[] graph = new ArrayList[amount.length];
        for (int i = 0; i < amount.length; i++) {
            graph[i] = new ArrayList<>();
        }

        for (int[] edge: edges) {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }

        helper_bfs(graph, bob, amount);

        return helper_dfs(graph, 0, amount, new boolean[amount.length]);
    }

    public void helper_bfs(List<Integer>[] graph, int bob, int[] amount) {
        Queue<Integer> queue = new ArrayDeque<>();
        int[] preList = new int[amount.length];
        boolean[] seen = new boolean[amount.length];

        queue.add(bob);

        while (!queue.isEmpty()) {
            int currNode = queue.poll();
            for (int nextNodes: graph[currNode]) {
                if (seen[nextNodes] == true) {
                    continue;
                }
                preList[nextNodes] = currNode;
                if (nextNodes == 0) {
                    break;
                }

                queue.add(nextNodes);
                seen[nextNodes] = true;
            }
        }

        int p = 0;
        List<Integer> list = new ArrayList<>();
        list.add(0);

        while (p != bob) {
            p = preList[p];
            list.add(p);
        }

        int reListSize = list.size();

        for (int i = 0; i < reListSize / 2; i++) {
            amount[list.get(list.size() - 1 - i)] = 0;
        }

        if (reListSize % 2 != 0) {
            int midIndex = reListSize / 2;
            amount[list.get(midIndex)] = amount[list.get(midIndex)] / 2;
        }
    }

    public int helper_dfs(List<Integer>[] graph, int node, int[] amount, boolean[] seen) {
        int res = Integer.MIN_VALUE;
        seen[node] = true;

        for (int nextNode: graph[node]) {
            if (seen[nextNode] == true) {
                continue;
            }
            res = Math.max(res, helper_dfs(graph, nextNode, amount, seen));
        }

        return res == Integer.MIN_VALUE ? amount[node] : amount[node] + res;
    }
}
