Question Link: https://leetcode.com/problems/collect-coins-in-a-tree/submissions/1518281236/

// n = 6
        // coins = [1,0,0,0,0,1]
        // edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]
        // tree = [[1], [0, 2], [1, 3], [2, 4], [3, 5], [4]]
        // leaf = [0, 5] -> [1, 4] -> [2,3]
        // u = 0 -> 1
        // tree[0] = 1
        // tree[1] = 2
        // tree[2] = 2
        // tree[3] = 2
        // tree[4] = 2
        // tree[5] = 1
        // sz = 2 -> 1 -> 0
        // temp = [1, 4] -> [2, 3]
        // tree = [[], [], [3], [2], [], []]
        // ans = 0 -> 1 -> 2

// n = 8
    // coins = [0,0,0,1,1,0,0,1]
    // edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]
    // trees = [[1, 2], [0, 3, 4], [0, 5], [1], [1], [2, 7], [], [5]]
    // leaf: find leave nodes with 0 coins = [3, 4, 7] -> [1, 5] -> [0, 2]
    // u = 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 5
    // tree[0].size == 2 [As we are calculating for leaf node the size should be 1]
    // tree[1] = 3
    // tree[2] = 2
    // tree[3] = 1 && coins[3] != 0 -> leaf.add(3)
    // tree[4] = 1 && coins[4] != 0 -> leaf.add(4)
    // tree[5] = 3
    // tree[6] = 1 && coins[6] == 0 -> v = 5 -> tree[5] = 2 -> break
    // tree[7] = 1 && coins[7] != 0 -> leaf.add(7)
    // sz = 2 -> 1 -> 0
    // temp = [] -> [1, 5] -> [0, 2]
    // trees = [[2], [], [0], [], [], [], [], []]
    // ans = 0 -> 1 -> 2
class Solution {
    public int collectTheCoins(int[] coins, int[][] edges) {
        int n = coins.length;
        Set<Integer>[] tree = new HashSet[n];
        for (int i = 0; i < n; i++) {
            tree[i] = new HashSet();
        }

        for (int[] edge: edges) {
            tree[edge[0]].add(edge[1]);
            tree[edge[1]].add(edge[0]);
        }

        List<Integer> leaf = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int u = i;
            while (tree[u].size() == 1 && coins[u] == 0) {
                int v = tree[u].iterator().next();
                tree[u].remove(v);
                tree[v].remove(u);
                u = v;
            }

            if (tree[u].size() == 1) {
                leaf.add(u);
            }
        }

        for (int atMostDis = 2; atMostDis > 0; atMostDis--) {
            List<Integer> temp = new ArrayList<>();
            for (int u: leaf) {
                if (tree[u].size() == 1) {
                    int v = tree[u].iterator().next();
                    tree[u].remove(v);
                    tree[v].remove(u);
                    if (tree[v].size() == 1) {
                        temp.add(v);
                    }
                }
            }
            leaf = temp;
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = ans + tree[i].size();
        }

        return ans;
    }
}
