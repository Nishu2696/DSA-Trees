Question Link: https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/

class Solution {
    private static final int mod = 1000000007; 
    public int numOfWays(int[] nums) {
        // list = [2,1,3]
        // countWays([2,1,3]);
        // list_size = 3
        // left = [1]
        // right = [3]
        // root = list.get(0) -> 2
        // leftCount = 1
        // rightCount = 1
        // comb(2, 1)
        // dp = [[1,0], [1,1], [1,2]]
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            list.add(nums[i]);
        }
        return countWays(list) - 1;
    }

    public int countWays(List<Integer> list) {
        if (list.size() <= 2) {
            return 1;
        }

        List<Integer> left = new ArrayList<>();
        List<Integer> right = new ArrayList<>();

        int root = list.get(0);

        for (int i = 1; i <list.size(); i++) {
            if (list.get(i) < root) {
                left.add(list.get(i));
            } else {
                right.add(list.get(i));
            }
        }

        int leftCount = countWays(left);
        int rightCount = countWays(right);

        return (int) ((comb(list.size() - 1, left.size())) % mod * (leftCount % mod) % mod * (rightCount % mod) % mod);
    }

    public long comb(int n, int k) {
        long[][] dp = new long[n+1][k+1];

        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= Math.min(i, k); j++) {
                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % mod;
            }
        }

        return dp[n][k];
    }
}
