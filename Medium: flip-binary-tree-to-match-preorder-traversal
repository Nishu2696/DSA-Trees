Question Link: https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int idx = 0;
    List<Integer> ans = new ArrayList<>();
    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
        dfs(root, voyage);
        return ans;
    }

    public void dfs(TreeNode root, int[] voyage) {
        if (root == null || (ans.size() != 0 && ans.get(0) == -1)) {
            return;
        }
        if (root.val != voyage[idx++]) {
            ans = new ArrayList<Integer>(Arrays.asList(-1));
        } else if (root.left != null && root.left.val != voyage[idx]) {
            ans.add(root.val);
            dfs(root.right, voyage);
            dfs(root.left, voyage);
        } else {
            dfs(root.left, voyage);
            dfs(root.right, voyage);
        }
    }
}
