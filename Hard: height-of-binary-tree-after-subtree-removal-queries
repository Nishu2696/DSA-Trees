Question Link: https://leetcode.com/problems/height-of-binary-tree-after-subtree-removal-queries/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // leftMap: {1=2, 2=2, 3=2, 4=2, 5=2, 6=2, 7=3} 
    // rightMap: {1=3, 2=2, 3=1, 4=3,5=3, 6=2, 7=3}
    // removed: {1: 0, 3: 3, 2: 3, 4: 2, 6: 2, 5: 2, 7: 2}
    public int[] treeQueries(TreeNode root, int[] queries) {
        Map<Integer, Integer> leftMap = new HashMap<>();
        Map<Integer, Integer> rightMap = new HashMap<>();
        Map<Integer, Integer> visited = new HashMap<>();

        populateHeight(root, 0, leftMap, rightMap);
        calculateTreeHeight(root, 0, leftMap, rightMap, visited);

        int[] output = new int[queries.length];

        for (int i = 0; i < queries.length; i++) {
            output[i] = visited.get(queries[i]);
        }

        return output;
    }

    public int populateHeight(TreeNode root, int height, Map<Integer, Integer> leftMap, Map<Integer, Integer> rightMap) {
        if (root == null) {
            return height - 1;
        }
        leftMap.put(root.val, populateHeight(root.left, height + 1, leftMap, rightMap));
        rightMap.put(root.val, populateHeight(root.right, height + 1, leftMap, rightMap));

        return Math.max(leftMap.get(root.val), rightMap.get(root.val));
    }

    public void calculateTreeHeight(TreeNode root, int height, Map<Integer, Integer> leftMap, Map<Integer, Integer> rightMap, Map<Integer, Integer> visited) {
        if (root == null) {
            return;
        }

        visited.put(root.val, height);

        calculateTreeHeight(root.left, Math.max(height, rightMap.get(root.val)), leftMap, rightMap, visited);
        calculateTreeHeight(root.right, Math.max(height, leftMap.get(root.val)), leftMap, rightMap, visited);
    }
}
