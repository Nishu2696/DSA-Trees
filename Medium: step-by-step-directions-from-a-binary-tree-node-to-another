Question Link: https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public String getDirections(TreeNode root, int startValue, int destValue) {
        StringBuilder s = new StringBuilder();
        StringBuilder d = new StringBuilder();

        findNode(root, startValue, s);
        findNode(root, destValue, d);

        int i = 0;
        int max_i = Math.min(s.length(), d.length());

        while (i < max_i && s.charAt(s.length() - i - 1) == d.charAt(d.length() - i - 1)) {
            i++;
        }

        return "U".repeat(s.length() - i) + d.reverse().toString().substring(i);
    }

    public boolean findNode(TreeNode root, int value, StringBuilder s) {
        if (root.val == value) {
            return true;
        }

        if (root.left != null && findNode(root.left, value, s)) {
            s.append('L');
        } else if (root.right != null && findNode(root.right, value, s)) {
            s.append('R');
        }

        return s.length() > 0;
    }
}
